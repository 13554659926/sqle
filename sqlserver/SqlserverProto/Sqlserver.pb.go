// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Sqlserver.proto

/*
Package SqlserverProto is a generated protocol buffer package.

It is generated from these files:
	Sqlserver.proto

It has these top-level messages:
	SplitSqlsInput
	Sql
	SplitSqlsOutput
	SqlserverMeta
	AdviseInput
	AdviseOutput
	AdviseResult
	GetRollbackSqlsInput
	GetRollbackSqlsOutput
*/
package SqlserverProto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SplitSqlsInput struct {
	Version string `protobuf:"bytes,1,opt,name=Version" json:"Version,omitempty"`
	Sqls    string `protobuf:"bytes,2,opt,name=Sqls" json:"Sqls,omitempty"`
}

func (m *SplitSqlsInput) Reset()                    { *m = SplitSqlsInput{} }
func (m *SplitSqlsInput) String() string            { return proto.CompactTextString(m) }
func (*SplitSqlsInput) ProtoMessage()               {}
func (*SplitSqlsInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SplitSqlsInput) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *SplitSqlsInput) GetSqls() string {
	if m != nil {
		return m.Sqls
	}
	return ""
}

type Sql struct {
	Sql   string `protobuf:"bytes,1,opt,name=Sql" json:"Sql,omitempty"`
	IsDDL bool   `protobuf:"varint,2,opt,name=IsDDL" json:"IsDDL,omitempty"`
	IsDML bool   `protobuf:"varint,3,opt,name=IsDML" json:"IsDML,omitempty"`
}

func (m *Sql) Reset()                    { *m = Sql{} }
func (m *Sql) String() string            { return proto.CompactTextString(m) }
func (*Sql) ProtoMessage()               {}
func (*Sql) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Sql) GetSql() string {
	if m != nil {
		return m.Sql
	}
	return ""
}

func (m *Sql) GetIsDDL() bool {
	if m != nil {
		return m.IsDDL
	}
	return false
}

func (m *Sql) GetIsDML() bool {
	if m != nil {
		return m.IsDML
	}
	return false
}

type SplitSqlsOutput struct {
	SplitSqls []*Sql `protobuf:"bytes,1,rep,name=SplitSqls" json:"SplitSqls,omitempty"`
}

func (m *SplitSqlsOutput) Reset()                    { *m = SplitSqlsOutput{} }
func (m *SplitSqlsOutput) String() string            { return proto.CompactTextString(m) }
func (*SplitSqlsOutput) ProtoMessage()               {}
func (*SplitSqlsOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SplitSqlsOutput) GetSplitSqls() []*Sql {
	if m != nil {
		return m.SplitSqls
	}
	return nil
}

type SqlserverMeta struct {
	User            string `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
	Password        string `protobuf:"bytes,2,opt,name=Password" json:"Password,omitempty"`
	Host            string `protobuf:"bytes,3,opt,name=Host" json:"Host,omitempty"`
	Port            string `protobuf:"bytes,4,opt,name=Port" json:"Port,omitempty"`
	CurrentDatabase string `protobuf:"bytes,5,opt,name=CurrentDatabase" json:"CurrentDatabase,omitempty"`
	CurrentSchema   string `protobuf:"bytes,6,opt,name=CurrentSchema" json:"CurrentSchema,omitempty"`
}

func (m *SqlserverMeta) Reset()                    { *m = SqlserverMeta{} }
func (m *SqlserverMeta) String() string            { return proto.CompactTextString(m) }
func (*SqlserverMeta) ProtoMessage()               {}
func (*SqlserverMeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SqlserverMeta) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *SqlserverMeta) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *SqlserverMeta) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *SqlserverMeta) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *SqlserverMeta) GetCurrentDatabase() string {
	if m != nil {
		return m.CurrentDatabase
	}
	return ""
}

func (m *SqlserverMeta) GetCurrentSchema() string {
	if m != nil {
		return m.CurrentSchema
	}
	return ""
}

type AdviseInput struct {
	Version       string         `protobuf:"bytes,1,opt,name=Version" json:"Version,omitempty"`
	Sqls          []string       `protobuf:"bytes,2,rep,name=Sqls" json:"Sqls,omitempty"`
	RuleNames     []string       `protobuf:"bytes,3,rep,name=RuleNames" json:"RuleNames,omitempty"`
	SqlserverMeta *SqlserverMeta `protobuf:"bytes,4,opt,name=SqlserverMeta" json:"SqlserverMeta,omitempty"`
}

func (m *AdviseInput) Reset()                    { *m = AdviseInput{} }
func (m *AdviseInput) String() string            { return proto.CompactTextString(m) }
func (*AdviseInput) ProtoMessage()               {}
func (*AdviseInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AdviseInput) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *AdviseInput) GetSqls() []string {
	if m != nil {
		return m.Sqls
	}
	return nil
}

func (m *AdviseInput) GetRuleNames() []string {
	if m != nil {
		return m.RuleNames
	}
	return nil
}

func (m *AdviseInput) GetSqlserverMeta() *SqlserverMeta {
	if m != nil {
		return m.SqlserverMeta
	}
	return nil
}

type AdviseOutput struct {
	Results map[string]*AdviseResult `protobuf:"bytes,1,rep,name=Results" json:"Results,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *AdviseOutput) Reset()                    { *m = AdviseOutput{} }
func (m *AdviseOutput) String() string            { return proto.CompactTextString(m) }
func (*AdviseOutput) ProtoMessage()               {}
func (*AdviseOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AdviseOutput) GetResults() map[string]*AdviseResult {
	if m != nil {
		return m.Results
	}
	return nil
}

type AdviseResult struct {
	AdviseLevel         string `protobuf:"bytes,1,opt,name=AdviseLevel" json:"AdviseLevel,omitempty"`
	AdviseResultMessage string `protobuf:"bytes,2,opt,name=AdviseResultMessage" json:"AdviseResultMessage,omitempty"`
}

func (m *AdviseResult) Reset()                    { *m = AdviseResult{} }
func (m *AdviseResult) String() string            { return proto.CompactTextString(m) }
func (*AdviseResult) ProtoMessage()               {}
func (*AdviseResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AdviseResult) GetAdviseLevel() string {
	if m != nil {
		return m.AdviseLevel
	}
	return ""
}

func (m *AdviseResult) GetAdviseResultMessage() string {
	if m != nil {
		return m.AdviseResultMessage
	}
	return ""
}

type GetRollbackSqlsInput struct {
	Version       string         `protobuf:"bytes,1,opt,name=Version" json:"Version,omitempty"`
	Sqls          []string       `protobuf:"bytes,2,rep,name=Sqls" json:"Sqls,omitempty"`
	SqlserverMeta *SqlserverMeta `protobuf:"bytes,3,opt,name=SqlserverMeta" json:"SqlserverMeta,omitempty"`
}

func (m *GetRollbackSqlsInput) Reset()                    { *m = GetRollbackSqlsInput{} }
func (m *GetRollbackSqlsInput) String() string            { return proto.CompactTextString(m) }
func (*GetRollbackSqlsInput) ProtoMessage()               {}
func (*GetRollbackSqlsInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetRollbackSqlsInput) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *GetRollbackSqlsInput) GetSqls() []string {
	if m != nil {
		return m.Sqls
	}
	return nil
}

func (m *GetRollbackSqlsInput) GetSqlserverMeta() *SqlserverMeta {
	if m != nil {
		return m.SqlserverMeta
	}
	return nil
}

type GetRollbackSqlsOutput struct {
	RollbackSqls []*Sql `protobuf:"bytes,1,rep,name=RollbackSqls" json:"RollbackSqls,omitempty"`
}

func (m *GetRollbackSqlsOutput) Reset()                    { *m = GetRollbackSqlsOutput{} }
func (m *GetRollbackSqlsOutput) String() string            { return proto.CompactTextString(m) }
func (*GetRollbackSqlsOutput) ProtoMessage()               {}
func (*GetRollbackSqlsOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetRollbackSqlsOutput) GetRollbackSqls() []*Sql {
	if m != nil {
		return m.RollbackSqls
	}
	return nil
}

func init() {
	proto.RegisterType((*SplitSqlsInput)(nil), "SqlserverProto.SplitSqlsInput")
	proto.RegisterType((*Sql)(nil), "SqlserverProto.Sql")
	proto.RegisterType((*SplitSqlsOutput)(nil), "SqlserverProto.SplitSqlsOutput")
	proto.RegisterType((*SqlserverMeta)(nil), "SqlserverProto.SqlserverMeta")
	proto.RegisterType((*AdviseInput)(nil), "SqlserverProto.AdviseInput")
	proto.RegisterType((*AdviseOutput)(nil), "SqlserverProto.AdviseOutput")
	proto.RegisterType((*AdviseResult)(nil), "SqlserverProto.AdviseResult")
	proto.RegisterType((*GetRollbackSqlsInput)(nil), "SqlserverProto.GetRollbackSqlsInput")
	proto.RegisterType((*GetRollbackSqlsOutput)(nil), "SqlserverProto.GetRollbackSqlsOutput")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SqlserverService service

type SqlserverServiceClient interface {
	GetSplitSqls(ctx context.Context, in *SplitSqlsInput, opts ...grpc.CallOption) (*SplitSqlsOutput, error)
	Advise(ctx context.Context, in *AdviseInput, opts ...grpc.CallOption) (*AdviseOutput, error)
	GetRollbackSqls(ctx context.Context, in *GetRollbackSqlsInput, opts ...grpc.CallOption) (*GetRollbackSqlsOutput, error)
}

type sqlserverServiceClient struct {
	cc *grpc.ClientConn
}

func NewSqlserverServiceClient(cc *grpc.ClientConn) SqlserverServiceClient {
	return &sqlserverServiceClient{cc}
}

func (c *sqlserverServiceClient) GetSplitSqls(ctx context.Context, in *SplitSqlsInput, opts ...grpc.CallOption) (*SplitSqlsOutput, error) {
	out := new(SplitSqlsOutput)
	err := grpc.Invoke(ctx, "/SqlserverProto.SqlserverService/GetSplitSqls", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlserverServiceClient) Advise(ctx context.Context, in *AdviseInput, opts ...grpc.CallOption) (*AdviseOutput, error) {
	out := new(AdviseOutput)
	err := grpc.Invoke(ctx, "/SqlserverProto.SqlserverService/Advise", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlserverServiceClient) GetRollbackSqls(ctx context.Context, in *GetRollbackSqlsInput, opts ...grpc.CallOption) (*GetRollbackSqlsOutput, error) {
	out := new(GetRollbackSqlsOutput)
	err := grpc.Invoke(ctx, "/SqlserverProto.SqlserverService/GetRollbackSqls", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SqlserverService service

type SqlserverServiceServer interface {
	GetSplitSqls(context.Context, *SplitSqlsInput) (*SplitSqlsOutput, error)
	Advise(context.Context, *AdviseInput) (*AdviseOutput, error)
	GetRollbackSqls(context.Context, *GetRollbackSqlsInput) (*GetRollbackSqlsOutput, error)
}

func RegisterSqlserverServiceServer(s *grpc.Server, srv SqlserverServiceServer) {
	s.RegisterService(&_SqlserverService_serviceDesc, srv)
}

func _SqlserverService_GetSplitSqls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SplitSqlsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlserverServiceServer).GetSplitSqls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SqlserverProto.SqlserverService/GetSplitSqls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlserverServiceServer).GetSplitSqls(ctx, req.(*SplitSqlsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlserverService_Advise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdviseInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlserverServiceServer).Advise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SqlserverProto.SqlserverService/Advise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlserverServiceServer).Advise(ctx, req.(*AdviseInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlserverService_GetRollbackSqls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRollbackSqlsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlserverServiceServer).GetRollbackSqls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SqlserverProto.SqlserverService/GetRollbackSqls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlserverServiceServer).GetRollbackSqls(ctx, req.(*GetRollbackSqlsInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _SqlserverService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SqlserverProto.SqlserverService",
	HandlerType: (*SqlserverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSplitSqls",
			Handler:    _SqlserverService_GetSplitSqls_Handler,
		},
		{
			MethodName: "Advise",
			Handler:    _SqlserverService_Advise_Handler,
		},
		{
			MethodName: "GetRollbackSqls",
			Handler:    _SqlserverService_GetRollbackSqls_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Sqlserver.proto",
}

func init() { proto.RegisterFile("Sqlserver.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 539 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xdd, 0x6e, 0xd3, 0x4c,
	0x10, 0xad, 0xe3, 0x26, 0x6d, 0x26, 0x69, 0x53, 0x6d, 0xfb, 0x49, 0x56, 0xbe, 0x00, 0xd1, 0xaa,
	0x48, 0xe1, 0x26, 0x82, 0x70, 0x01, 0xe2, 0x02, 0x09, 0x25, 0x55, 0xa9, 0x94, 0x40, 0x58, 0x0b,
	0xc4, 0x25, 0x9b, 0x74, 0x04, 0x51, 0xdc, 0x38, 0xdd, 0x5d, 0x1b, 0xe5, 0x11, 0xb8, 0xe1, 0x11,
	0x78, 0x03, 0xae, 0x79, 0x3d, 0xb4, 0xeb, 0x9f, 0xd8, 0xae, 0x29, 0x3f, 0x57, 0xde, 0x39, 0x73,
	0x66, 0x7c, 0x3c, 0x67, 0xd6, 0xd0, 0x72, 0xaf, 0x3d, 0x89, 0x22, 0x44, 0xd1, 0x5f, 0x0b, 0x5f,
	0xf9, 0xe4, 0x30, 0x05, 0xa6, 0x3a, 0xa6, 0xcf, 0xe1, 0xd0, 0x5d, 0x7b, 0x0b, 0xa5, 0xe1, 0x8b,
	0xd5, 0x3a, 0x50, 0xc4, 0x81, 0xbd, 0x77, 0x28, 0xe4, 0xc2, 0x5f, 0x39, 0x56, 0xd7, 0xea, 0xd5,
	0x59, 0x12, 0x12, 0x02, 0xbb, 0x9a, 0xe6, 0x54, 0x0c, 0x6c, 0xce, 0x74, 0x08, 0xb6, 0x7b, 0xed,
	0x91, 0x23, 0xf3, 0x88, 0x0b, 0x0c, 0x72, 0x02, 0xd5, 0x0b, 0x39, 0x1a, 0x8d, 0x0d, 0x7b, 0x9f,
	0x45, 0x41, 0x8c, 0x4e, 0xc6, 0x8e, 0x9d, 0xa2, 0x93, 0x31, 0x1d, 0x41, 0x2b, 0x15, 0xf1, 0x3a,
	0x50, 0x5a, 0xc5, 0x23, 0xa8, 0xa7, 0x90, 0x63, 0x75, 0xed, 0x5e, 0x63, 0x70, 0xdc, 0xcf, 0x6b,
	0xd7, 0x21, 0xdb, 0xb2, 0xe8, 0x0f, 0x0b, 0x0e, 0x52, 0xc6, 0x04, 0x15, 0xd7, 0x82, 0xdf, 0x4a,
	0x14, 0xb1, 0x2c, 0x73, 0x26, 0x6d, 0xd8, 0x9f, 0x72, 0x29, 0x3f, 0xfb, 0xe2, 0x32, 0xfe, 0x90,
	0x34, 0xd6, 0xfc, 0x97, 0xbe, 0x54, 0x46, 0x5c, 0x9d, 0x99, 0xb3, 0xc6, 0xa6, 0xbe, 0x50, 0xce,
	0x6e, 0x84, 0xe9, 0x33, 0xe9, 0x41, 0x6b, 0x18, 0x08, 0x81, 0x2b, 0x35, 0xe2, 0x8a, 0xcf, 0xb8,
	0x44, 0xa7, 0x6a, 0xd2, 0x45, 0x98, 0x9c, 0xc2, 0x41, 0x0c, 0xb9, 0xf3, 0x4f, 0x78, 0xc5, 0x9d,
	0x9a, 0xe1, 0xe5, 0x41, 0xfa, 0xcd, 0x82, 0xc6, 0x8b, 0xcb, 0x70, 0x21, 0xf1, 0xcf, 0x2d, 0xb0,
	0x13, 0x0b, 0x48, 0x07, 0xea, 0x2c, 0xf0, 0xf0, 0x15, 0xbf, 0x42, 0xe9, 0xd8, 0x26, 0xb1, 0x05,
	0xc8, 0xb0, 0x30, 0x14, 0xf3, 0x21, 0x8d, 0xc1, 0x9d, 0x92, 0x61, 0x6e, 0x49, 0x2c, 0x5f, 0x43,
	0xbf, 0x5b, 0xd0, 0x8c, 0x04, 0xc6, 0xf6, 0x0c, 0x61, 0x8f, 0xa1, 0x0c, 0x3c, 0x95, 0x98, 0xf3,
	0xa0, 0xd8, 0x2f, 0x4b, 0xef, 0xc7, 0xdc, 0xb3, 0x95, 0x12, 0x1b, 0x96, 0x54, 0xb6, 0xdf, 0x43,
	0x33, 0x9b, 0xd0, 0x4b, 0xb4, 0xc4, 0x4d, 0xb2, 0x44, 0x4b, 0xdc, 0x90, 0x01, 0x54, 0x43, 0xee,
	0x05, 0x68, 0x9c, 0x6a, 0x0c, 0x3a, 0xe5, 0x2f, 0x89, 0x9a, 0xb0, 0x88, 0xfa, 0xac, 0xf2, 0xd4,
	0xa2, 0xb3, 0x44, 0x6e, 0x94, 0x22, 0xdd, 0x64, 0xbe, 0x63, 0x0c, 0x31, 0x59, 0xd3, 0x2c, 0x44,
	0x1e, 0xc2, 0x71, 0xb6, 0x62, 0x82, 0x52, 0xf2, 0x8f, 0x18, 0x6f, 0x48, 0x59, 0x8a, 0x7e, 0xb1,
	0xe0, 0xe4, 0x1c, 0x15, 0xf3, 0x3d, 0x6f, 0xc6, 0xe7, 0xcb, 0xbf, 0xbb, 0x40, 0x5b, 0xf7, 0x6e,
	0xf8, 0x63, 0xff, 0x83, 0x3f, 0x53, 0xf8, 0xaf, 0x20, 0x25, 0xf6, 0xe9, 0x09, 0x34, 0xb3, 0xe8,
	0x6d, 0x37, 0x29, 0x47, 0x1c, 0x7c, 0xad, 0xc0, 0x51, 0x4a, 0x72, 0x51, 0x84, 0x8b, 0x39, 0x92,
	0x37, 0xd0, 0x3c, 0x47, 0x95, 0xde, 0x38, 0x72, 0xf7, 0x46, 0x9f, 0xdc, 0xaf, 0xa4, 0x7d, 0xef,
	0x97, 0xf9, 0x48, 0x1e, 0xdd, 0x21, 0x67, 0x50, 0x8b, 0x86, 0x4b, 0xfe, 0x2f, 0x37, 0x37, 0xea,
	0xd4, 0xb9, 0x6d, 0xbd, 0xe8, 0x0e, 0xf9, 0x00, 0xad, 0xc2, 0x00, 0xc8, 0x69, 0xb1, 0xa4, 0xcc,
	0xac, 0xf6, 0xfd, 0xdf, 0xb0, 0x92, 0x37, 0xcc, 0x6a, 0xe6, 0xff, 0xf9, 0xf8, 0x67, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xc7, 0xf4, 0x70, 0x38, 0x52, 0x05, 0x00, 0x00,
}
