// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Sqlserver.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SqlserverProto {

  /// <summary>Holder for reflection information generated from Sqlserver.proto</summary>
  public static partial class SqlserverReflection {

    #region Descriptor
    /// <summary>File descriptor for Sqlserver.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SqlserverReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9TcWxzZXJ2ZXIucHJvdG8SDlNxbHNlcnZlclByb3RvIi8KDlNwbGl0U3Fs",
            "c0lucHV0Eg8KB1ZlcnNpb24YASABKAkSDAoEU3FscxgCIAEoCSIfCg9TcGxp",
            "dFNxbHNPdXRwdXQSDAoEU3FscxgBIAMoCSI+CgpBdWRpdElucHV0Eg8KB1Zl",
            "cnNpb24YASABKAkSDAoEU3FscxgCIAMoCRIRCglSdWxlTmFtZXMYAyADKAki",
            "QAoLQXVkaXRPdXRwdXQSMQoMQXVkaXRSZXN1bHRzGAEgAygLMhsuU3Fsc2Vy",
            "dmVyUHJvdG8uQXVkaXRSZXN1bHQiUgoLQXVkaXRSZXN1bHQSEwoLQXVkaXRT",
            "dGF0dXMYASABKAkSEgoKQXVkaXRMZXZlbBgCIAEoCRIaChJBdWRpdFJlc3Vs",
            "dE1lc3NhZ2UYAyABKAkiNQoUR2V0Um9sbGJhY2tTcWxzSW5wdXQSDwoHVmVy",
            "c2lvbhgBIAEoCRIMCgRTcWxzGAIgAygJIi0KFUdldFJvbGxiYWNrU3Fsc091",
            "dHB1dBIUCgxSb2xsYmFja1NxbHMYASADKAkyiwIKEFNxbHNlcnZlclNlcnZp",
            "Y2USUQoMR2V0U3BsaXRTcWxzEh4uU3Fsc2VydmVyUHJvdG8uU3BsaXRTcWxz",
            "SW5wdXQaHy5TcWxzZXJ2ZXJQcm90by5TcGxpdFNxbHNPdXRwdXQiABJCCgVB",
            "dWRpdBIaLlNxbHNlcnZlclByb3RvLkF1ZGl0SW5wdXQaGy5TcWxzZXJ2ZXJQ",
            "cm90by5BdWRpdE91dHB1dCIAEmAKD0dldFJvbGxiYWNrU3FscxIkLlNxbHNl",
            "cnZlclByb3RvLkdldFJvbGxiYWNrU3Fsc0lucHV0GiUuU3Fsc2VydmVyUHJv",
            "dG8uR2V0Um9sbGJhY2tTcWxzT3V0cHV0IgBiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SqlserverProto.SplitSqlsInput), global::SqlserverProto.SplitSqlsInput.Parser, new[]{ "Version", "Sqls" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SqlserverProto.SplitSqlsOutput), global::SqlserverProto.SplitSqlsOutput.Parser, new[]{ "Sqls" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SqlserverProto.AuditInput), global::SqlserverProto.AuditInput.Parser, new[]{ "Version", "Sqls", "RuleNames" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SqlserverProto.AuditOutput), global::SqlserverProto.AuditOutput.Parser, new[]{ "AuditResults" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SqlserverProto.AuditResult), global::SqlserverProto.AuditResult.Parser, new[]{ "AuditStatus", "AuditLevel", "AuditResultMessage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SqlserverProto.GetRollbackSqlsInput), global::SqlserverProto.GetRollbackSqlsInput.Parser, new[]{ "Version", "Sqls" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SqlserverProto.GetRollbackSqlsOutput), global::SqlserverProto.GetRollbackSqlsOutput.Parser, new[]{ "RollbackSqls" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SplitSqlsInput : pb::IMessage<SplitSqlsInput> {
    private static readonly pb::MessageParser<SplitSqlsInput> _parser = new pb::MessageParser<SplitSqlsInput>(() => new SplitSqlsInput());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SplitSqlsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SqlserverProto.SqlserverReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SplitSqlsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SplitSqlsInput(SplitSqlsInput other) : this() {
      version_ = other.version_;
      sqls_ = other.sqls_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SplitSqlsInput Clone() {
      return new SplitSqlsInput(this);
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Sqls" field.</summary>
    public const int SqlsFieldNumber = 2;
    private string sqls_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sqls {
      get { return sqls_; }
      set {
        sqls_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SplitSqlsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SplitSqlsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (Sqls != other.Sqls) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Sqls.Length != 0) hash ^= Sqls.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      if (Sqls.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Sqls);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (Sqls.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sqls);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SplitSqlsInput other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Sqls.Length != 0) {
        Sqls = other.Sqls;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 18: {
            Sqls = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SplitSqlsOutput : pb::IMessage<SplitSqlsOutput> {
    private static readonly pb::MessageParser<SplitSqlsOutput> _parser = new pb::MessageParser<SplitSqlsOutput>(() => new SplitSqlsOutput());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SplitSqlsOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SqlserverProto.SqlserverReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SplitSqlsOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SplitSqlsOutput(SplitSqlsOutput other) : this() {
      sqls_ = other.sqls_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SplitSqlsOutput Clone() {
      return new SplitSqlsOutput(this);
    }

    /// <summary>Field number for the "Sqls" field.</summary>
    public const int SqlsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_sqls_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> sqls_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Sqls {
      get { return sqls_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SplitSqlsOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SplitSqlsOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!sqls_.Equals(other.sqls_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= sqls_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      sqls_.WriteTo(output, _repeated_sqls_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += sqls_.CalculateSize(_repeated_sqls_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SplitSqlsOutput other) {
      if (other == null) {
        return;
      }
      sqls_.Add(other.sqls_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            sqls_.AddEntriesFrom(input, _repeated_sqls_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuditInput : pb::IMessage<AuditInput> {
    private static readonly pb::MessageParser<AuditInput> _parser = new pb::MessageParser<AuditInput>(() => new AuditInput());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuditInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SqlserverProto.SqlserverReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditInput(AuditInput other) : this() {
      version_ = other.version_;
      sqls_ = other.sqls_.Clone();
      ruleNames_ = other.ruleNames_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditInput Clone() {
      return new AuditInput(this);
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Sqls" field.</summary>
    public const int SqlsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_sqls_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> sqls_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Sqls {
      get { return sqls_; }
    }

    /// <summary>Field number for the "RuleNames" field.</summary>
    public const int RuleNamesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_ruleNames_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> ruleNames_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RuleNames {
      get { return ruleNames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuditInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuditInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if(!sqls_.Equals(other.sqls_)) return false;
      if(!ruleNames_.Equals(other.ruleNames_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      hash ^= sqls_.GetHashCode();
      hash ^= ruleNames_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      sqls_.WriteTo(output, _repeated_sqls_codec);
      ruleNames_.WriteTo(output, _repeated_ruleNames_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      size += sqls_.CalculateSize(_repeated_sqls_codec);
      size += ruleNames_.CalculateSize(_repeated_ruleNames_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuditInput other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      sqls_.Add(other.sqls_);
      ruleNames_.Add(other.ruleNames_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 18: {
            sqls_.AddEntriesFrom(input, _repeated_sqls_codec);
            break;
          }
          case 26: {
            ruleNames_.AddEntriesFrom(input, _repeated_ruleNames_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuditOutput : pb::IMessage<AuditOutput> {
    private static readonly pb::MessageParser<AuditOutput> _parser = new pb::MessageParser<AuditOutput>(() => new AuditOutput());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuditOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SqlserverProto.SqlserverReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditOutput(AuditOutput other) : this() {
      auditResults_ = other.auditResults_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditOutput Clone() {
      return new AuditOutput(this);
    }

    /// <summary>Field number for the "AuditResults" field.</summary>
    public const int AuditResultsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SqlserverProto.AuditResult> _repeated_auditResults_codec
        = pb::FieldCodec.ForMessage(10, global::SqlserverProto.AuditResult.Parser);
    private readonly pbc::RepeatedField<global::SqlserverProto.AuditResult> auditResults_ = new pbc::RepeatedField<global::SqlserverProto.AuditResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SqlserverProto.AuditResult> AuditResults {
      get { return auditResults_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuditOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuditOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!auditResults_.Equals(other.auditResults_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= auditResults_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      auditResults_.WriteTo(output, _repeated_auditResults_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += auditResults_.CalculateSize(_repeated_auditResults_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuditOutput other) {
      if (other == null) {
        return;
      }
      auditResults_.Add(other.auditResults_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            auditResults_.AddEntriesFrom(input, _repeated_auditResults_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuditResult : pb::IMessage<AuditResult> {
    private static readonly pb::MessageParser<AuditResult> _parser = new pb::MessageParser<AuditResult>(() => new AuditResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuditResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SqlserverProto.SqlserverReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditResult(AuditResult other) : this() {
      auditStatus_ = other.auditStatus_;
      auditLevel_ = other.auditLevel_;
      auditResultMessage_ = other.auditResultMessage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuditResult Clone() {
      return new AuditResult(this);
    }

    /// <summary>Field number for the "AuditStatus" field.</summary>
    public const int AuditStatusFieldNumber = 1;
    private string auditStatus_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuditStatus {
      get { return auditStatus_; }
      set {
        auditStatus_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AuditLevel" field.</summary>
    public const int AuditLevelFieldNumber = 2;
    private string auditLevel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuditLevel {
      get { return auditLevel_; }
      set {
        auditLevel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AuditResultMessage" field.</summary>
    public const int AuditResultMessageFieldNumber = 3;
    private string auditResultMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuditResultMessage {
      get { return auditResultMessage_; }
      set {
        auditResultMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuditResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuditResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AuditStatus != other.AuditStatus) return false;
      if (AuditLevel != other.AuditLevel) return false;
      if (AuditResultMessage != other.AuditResultMessage) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AuditStatus.Length != 0) hash ^= AuditStatus.GetHashCode();
      if (AuditLevel.Length != 0) hash ^= AuditLevel.GetHashCode();
      if (AuditResultMessage.Length != 0) hash ^= AuditResultMessage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AuditStatus.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AuditStatus);
      }
      if (AuditLevel.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AuditLevel);
      }
      if (AuditResultMessage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AuditResultMessage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AuditStatus.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuditStatus);
      }
      if (AuditLevel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuditLevel);
      }
      if (AuditResultMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuditResultMessage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuditResult other) {
      if (other == null) {
        return;
      }
      if (other.AuditStatus.Length != 0) {
        AuditStatus = other.AuditStatus;
      }
      if (other.AuditLevel.Length != 0) {
        AuditLevel = other.AuditLevel;
      }
      if (other.AuditResultMessage.Length != 0) {
        AuditResultMessage = other.AuditResultMessage;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AuditStatus = input.ReadString();
            break;
          }
          case 18: {
            AuditLevel = input.ReadString();
            break;
          }
          case 26: {
            AuditResultMessage = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRollbackSqlsInput : pb::IMessage<GetRollbackSqlsInput> {
    private static readonly pb::MessageParser<GetRollbackSqlsInput> _parser = new pb::MessageParser<GetRollbackSqlsInput>(() => new GetRollbackSqlsInput());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRollbackSqlsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SqlserverProto.SqlserverReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRollbackSqlsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRollbackSqlsInput(GetRollbackSqlsInput other) : this() {
      version_ = other.version_;
      sqls_ = other.sqls_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRollbackSqlsInput Clone() {
      return new GetRollbackSqlsInput(this);
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Sqls" field.</summary>
    public const int SqlsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_sqls_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> sqls_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Sqls {
      get { return sqls_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRollbackSqlsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRollbackSqlsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if(!sqls_.Equals(other.sqls_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      hash ^= sqls_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      sqls_.WriteTo(output, _repeated_sqls_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      size += sqls_.CalculateSize(_repeated_sqls_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRollbackSqlsInput other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      sqls_.Add(other.sqls_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 18: {
            sqls_.AddEntriesFrom(input, _repeated_sqls_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRollbackSqlsOutput : pb::IMessage<GetRollbackSqlsOutput> {
    private static readonly pb::MessageParser<GetRollbackSqlsOutput> _parser = new pb::MessageParser<GetRollbackSqlsOutput>(() => new GetRollbackSqlsOutput());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRollbackSqlsOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SqlserverProto.SqlserverReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRollbackSqlsOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRollbackSqlsOutput(GetRollbackSqlsOutput other) : this() {
      rollbackSqls_ = other.rollbackSqls_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRollbackSqlsOutput Clone() {
      return new GetRollbackSqlsOutput(this);
    }

    /// <summary>Field number for the "RollbackSqls" field.</summary>
    public const int RollbackSqlsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_rollbackSqls_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> rollbackSqls_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RollbackSqls {
      get { return rollbackSqls_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRollbackSqlsOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRollbackSqlsOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rollbackSqls_.Equals(other.rollbackSqls_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rollbackSqls_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rollbackSqls_.WriteTo(output, _repeated_rollbackSqls_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rollbackSqls_.CalculateSize(_repeated_rollbackSqls_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRollbackSqlsOutput other) {
      if (other == null) {
        return;
      }
      rollbackSqls_.Add(other.rollbackSqls_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rollbackSqls_.AddEntriesFrom(input, _repeated_rollbackSqls_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
