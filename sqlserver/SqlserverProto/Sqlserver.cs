// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Sqlserver.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SqlserverProto {

  /// <summary>Holder for reflection information generated from Sqlserver.proto</summary>
  public static partial class SqlserverReflection {

    #region Descriptor
    /// <summary>File descriptor for Sqlserver.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SqlserverReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9TcWxzZXJ2ZXIucHJvdG8SDlNxbHNlcnZlclByb3RvIi8KDlNwbGl0U3Fs",
            "c0lucHV0Eg8KB1ZlcnNpb24YASABKAkSDAoEU3FscxgCIAEoCSJACgNTcWwS",
            "CwoDU3FsGAEgASgJEg0KBUlzRERMGAIgASgIEg0KBUlzRE1MGAMgASgIEg4K",
            "BkVyck1zZxgEIAEoCSI5Cg9TcGxpdFNxbHNPdXRwdXQSJgoJU3BsaXRTcWxz",
            "GAEgAygLMhMuU3Fsc2VydmVyUHJvdG8uU3FsInsKDVNxbHNlcnZlck1ldGES",
            "DAoEVXNlchgBIAEoCRIQCghQYXNzd29yZBgCIAEoCRIMCgRIb3N0GAMgASgJ",
            "EgwKBFBvcnQYBCABKAkSFwoPQ3VycmVudERhdGFiYXNlGAUgASgJEhUKDUN1",
            "cnJlbnRTY2hlbWEYBiABKAkiqQEKC0FkdmlzZUlucHV0Eg8KB1ZlcnNpb24Y",
            "ASABKAkSDAoEU3FscxgCIAMoCRIRCglSdWxlTmFtZXMYAyADKAkSNAoNU3Fs",
            "c2VydmVyTWV0YRgEIAEoCzIdLlNxbHNlcnZlclByb3RvLlNxbHNlcnZlck1l",
            "dGESMgoORERMQ29udGV4dFNxbHMYBSADKAsyGi5TcWxzZXJ2ZXJQcm90by5E",
            "RExDb250ZXh0IhoKCkRETENvbnRleHQSDAoEU3FscxgBIAMoCSK1AQoMQWR2",
            "aXNlT3V0cHV0EjoKB1Jlc3VsdHMYASADKAsyKS5TcWxzZXJ2ZXJQcm90by5B",
            "ZHZpc2VPdXRwdXQuUmVzdWx0c0VudHJ5EhsKE0Jhc2VWYWxpZGF0b3JGYWls",
            "ZWQYAiABKAgaTAoMUmVzdWx0c0VudHJ5EgsKA2tleRgBIAEoCRIrCgV2YWx1",
            "ZRgCIAEoCzIcLlNxbHNlcnZlclByb3RvLkFkdmlzZVJlc3VsdDoCOAEiXgoM",
            "QWR2aXNlUmVzdWx0EhMKC0FkdmlzZUxldmVsGAEgASgJEhsKE0FkdmlzZVJl",
            "c3VsdE1lc3NhZ2UYAiABKAkSDQoFSXNEREwYAyABKAgSDQoFSXNETUwYBCAB",
            "KAgiJAoGQ29uZmlnEhoKEkRNTFJvbGxiYWNrTWF4Um93cxgBIAEoAyKbAQoU",
            "R2V0Um9sbGJhY2tTcWxzSW5wdXQSDwoHVmVyc2lvbhgBIAEoCRIMCgRTcWxz",
            "GAIgAygJEjQKDVNxbHNlcnZlck1ldGEYAyABKAsyHS5TcWxzZXJ2ZXJQcm90",
            "by5TcWxzZXJ2ZXJNZXRhEi4KDlJvbGxiYWNrQ29uZmlnGAQgASgLMhYuU3Fs",
            "c2VydmVyUHJvdG8uQ29uZmlnIkIKFUdldFJvbGxiYWNrU3Fsc091dHB1dBIp",
            "CgxSb2xsYmFja1NxbHMYASADKAsyEy5TcWxzZXJ2ZXJQcm90by5TcWwyjgIK",
            "EFNxbHNlcnZlclNlcnZpY2USUQoMR2V0U3BsaXRTcWxzEh4uU3Fsc2VydmVy",
            "UHJvdG8uU3BsaXRTcWxzSW5wdXQaHy5TcWxzZXJ2ZXJQcm90by5TcGxpdFNx",
            "bHNPdXRwdXQiABJFCgZBZHZpc2USGy5TcWxzZXJ2ZXJQcm90by5BZHZpc2VJ",
            "bnB1dBocLlNxbHNlcnZlclByb3RvLkFkdmlzZU91dHB1dCIAEmAKD0dldFJv",
            "bGxiYWNrU3FscxIkLlNxbHNlcnZlclByb3RvLkdldFJvbGxiYWNrU3Fsc0lu",
            "cHV0GiUuU3Fsc2VydmVyUHJvdG8uR2V0Um9sbGJhY2tTcWxzT3V0cHV0IgBi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SqlserverProto.SplitSqlsInput), global::SqlserverProto.SplitSqlsInput.Parser, new[]{ "Version", "Sqls" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SqlserverProto.Sql), global::SqlserverProto.Sql.Parser, new[]{ "Sql_", "IsDDL", "IsDML", "ErrMsg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SqlserverProto.SplitSqlsOutput), global::SqlserverProto.SplitSqlsOutput.Parser, new[]{ "SplitSqls" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SqlserverProto.SqlserverMeta), global::SqlserverProto.SqlserverMeta.Parser, new[]{ "User", "Password", "Host", "Port", "CurrentDatabase", "CurrentSchema" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SqlserverProto.AdviseInput), global::SqlserverProto.AdviseInput.Parser, new[]{ "Version", "Sqls", "RuleNames", "SqlserverMeta", "DDLContextSqls" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SqlserverProto.DDLContext), global::SqlserverProto.DDLContext.Parser, new[]{ "Sqls" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SqlserverProto.AdviseOutput), global::SqlserverProto.AdviseOutput.Parser, new[]{ "Results", "BaseValidatorFailed" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::SqlserverProto.AdviseResult), global::SqlserverProto.AdviseResult.Parser, new[]{ "AdviseLevel", "AdviseResultMessage", "IsDDL", "IsDML" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SqlserverProto.Config), global::SqlserverProto.Config.Parser, new[]{ "DMLRollbackMaxRows" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SqlserverProto.GetRollbackSqlsInput), global::SqlserverProto.GetRollbackSqlsInput.Parser, new[]{ "Version", "Sqls", "SqlserverMeta", "RollbackConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SqlserverProto.GetRollbackSqlsOutput), global::SqlserverProto.GetRollbackSqlsOutput.Parser, new[]{ "RollbackSqls" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SplitSqlsInput : pb::IMessage<SplitSqlsInput> {
    private static readonly pb::MessageParser<SplitSqlsInput> _parser = new pb::MessageParser<SplitSqlsInput>(() => new SplitSqlsInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SplitSqlsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SqlserverProto.SqlserverReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SplitSqlsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SplitSqlsInput(SplitSqlsInput other) : this() {
      version_ = other.version_;
      sqls_ = other.sqls_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SplitSqlsInput Clone() {
      return new SplitSqlsInput(this);
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Sqls" field.</summary>
    public const int SqlsFieldNumber = 2;
    private string sqls_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sqls {
      get { return sqls_; }
      set {
        sqls_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SplitSqlsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SplitSqlsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (Sqls != other.Sqls) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Sqls.Length != 0) hash ^= Sqls.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      if (Sqls.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Sqls);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (Sqls.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sqls);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SplitSqlsInput other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Sqls.Length != 0) {
        Sqls = other.Sqls;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 18: {
            Sqls = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Sql : pb::IMessage<Sql> {
    private static readonly pb::MessageParser<Sql> _parser = new pb::MessageParser<Sql>(() => new Sql());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Sql> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SqlserverProto.SqlserverReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sql() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sql(Sql other) : this() {
      sql_ = other.sql_;
      isDDL_ = other.isDDL_;
      isDML_ = other.isDML_;
      errMsg_ = other.errMsg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sql Clone() {
      return new Sql(this);
    }

    /// <summary>Field number for the "Sql" field.</summary>
    public const int Sql_FieldNumber = 1;
    private string sql_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sql_ {
      get { return sql_; }
      set {
        sql_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsDDL" field.</summary>
    public const int IsDDLFieldNumber = 2;
    private bool isDDL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDDL {
      get { return isDDL_; }
      set {
        isDDL_ = value;
      }
    }

    /// <summary>Field number for the "IsDML" field.</summary>
    public const int IsDMLFieldNumber = 3;
    private bool isDML_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDML {
      get { return isDML_; }
      set {
        isDML_ = value;
      }
    }

    /// <summary>Field number for the "ErrMsg" field.</summary>
    public const int ErrMsgFieldNumber = 4;
    private string errMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrMsg {
      get { return errMsg_; }
      set {
        errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Sql);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Sql other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sql_ != other.Sql_) return false;
      if (IsDDL != other.IsDDL) return false;
      if (IsDML != other.IsDML) return false;
      if (ErrMsg != other.ErrMsg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Sql_.Length != 0) hash ^= Sql_.GetHashCode();
      if (IsDDL != false) hash ^= IsDDL.GetHashCode();
      if (IsDML != false) hash ^= IsDML.GetHashCode();
      if (ErrMsg.Length != 0) hash ^= ErrMsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Sql_.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Sql_);
      }
      if (IsDDL != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsDDL);
      }
      if (IsDML != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsDML);
      }
      if (ErrMsg.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ErrMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sql_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sql_);
      }
      if (IsDDL != false) {
        size += 1 + 1;
      }
      if (IsDML != false) {
        size += 1 + 1;
      }
      if (ErrMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Sql other) {
      if (other == null) {
        return;
      }
      if (other.Sql_.Length != 0) {
        Sql_ = other.Sql_;
      }
      if (other.IsDDL != false) {
        IsDDL = other.IsDDL;
      }
      if (other.IsDML != false) {
        IsDML = other.IsDML;
      }
      if (other.ErrMsg.Length != 0) {
        ErrMsg = other.ErrMsg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Sql_ = input.ReadString();
            break;
          }
          case 16: {
            IsDDL = input.ReadBool();
            break;
          }
          case 24: {
            IsDML = input.ReadBool();
            break;
          }
          case 34: {
            ErrMsg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SplitSqlsOutput : pb::IMessage<SplitSqlsOutput> {
    private static readonly pb::MessageParser<SplitSqlsOutput> _parser = new pb::MessageParser<SplitSqlsOutput>(() => new SplitSqlsOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SplitSqlsOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SqlserverProto.SqlserverReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SplitSqlsOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SplitSqlsOutput(SplitSqlsOutput other) : this() {
      splitSqls_ = other.splitSqls_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SplitSqlsOutput Clone() {
      return new SplitSqlsOutput(this);
    }

    /// <summary>Field number for the "SplitSqls" field.</summary>
    public const int SplitSqlsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SqlserverProto.Sql> _repeated_splitSqls_codec
        = pb::FieldCodec.ForMessage(10, global::SqlserverProto.Sql.Parser);
    private readonly pbc::RepeatedField<global::SqlserverProto.Sql> splitSqls_ = new pbc::RepeatedField<global::SqlserverProto.Sql>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SqlserverProto.Sql> SplitSqls {
      get { return splitSqls_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SplitSqlsOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SplitSqlsOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!splitSqls_.Equals(other.splitSqls_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= splitSqls_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      splitSqls_.WriteTo(output, _repeated_splitSqls_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += splitSqls_.CalculateSize(_repeated_splitSqls_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SplitSqlsOutput other) {
      if (other == null) {
        return;
      }
      splitSqls_.Add(other.splitSqls_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            splitSqls_.AddEntriesFrom(input, _repeated_splitSqls_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SqlserverMeta : pb::IMessage<SqlserverMeta> {
    private static readonly pb::MessageParser<SqlserverMeta> _parser = new pb::MessageParser<SqlserverMeta>(() => new SqlserverMeta());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SqlserverMeta> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SqlserverProto.SqlserverReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlserverMeta() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlserverMeta(SqlserverMeta other) : this() {
      user_ = other.user_;
      password_ = other.password_;
      host_ = other.host_;
      port_ = other.port_;
      currentDatabase_ = other.currentDatabase_;
      currentSchema_ = other.currentSchema_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlserverMeta Clone() {
      return new SqlserverMeta(this);
    }

    /// <summary>Field number for the "User" field.</summary>
    public const int UserFieldNumber = 1;
    private string user_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string User {
      get { return user_; }
      set {
        user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Host" field.</summary>
    public const int HostFieldNumber = 3;
    private string host_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Port" field.</summary>
    public const int PortFieldNumber = 4;
    private string port_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Port {
      get { return port_; }
      set {
        port_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentDatabase" field.</summary>
    public const int CurrentDatabaseFieldNumber = 5;
    private string currentDatabase_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentDatabase {
      get { return currentDatabase_; }
      set {
        currentDatabase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentSchema" field.</summary>
    public const int CurrentSchemaFieldNumber = 6;
    private string currentSchema_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentSchema {
      get { return currentSchema_; }
      set {
        currentSchema_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SqlserverMeta);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SqlserverMeta other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (User != other.User) return false;
      if (Password != other.Password) return false;
      if (Host != other.Host) return false;
      if (Port != other.Port) return false;
      if (CurrentDatabase != other.CurrentDatabase) return false;
      if (CurrentSchema != other.CurrentSchema) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (User.Length != 0) hash ^= User.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (Port.Length != 0) hash ^= Port.GetHashCode();
      if (CurrentDatabase.Length != 0) hash ^= CurrentDatabase.GetHashCode();
      if (CurrentSchema.Length != 0) hash ^= CurrentSchema.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (User.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(User);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (Host.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Host);
      }
      if (Port.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Port);
      }
      if (CurrentDatabase.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CurrentDatabase);
      }
      if (CurrentSchema.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CurrentSchema);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (User.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (Port.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Port);
      }
      if (CurrentDatabase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentDatabase);
      }
      if (CurrentSchema.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentSchema);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SqlserverMeta other) {
      if (other == null) {
        return;
      }
      if (other.User.Length != 0) {
        User = other.User;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.Port.Length != 0) {
        Port = other.Port;
      }
      if (other.CurrentDatabase.Length != 0) {
        CurrentDatabase = other.CurrentDatabase;
      }
      if (other.CurrentSchema.Length != 0) {
        CurrentSchema = other.CurrentSchema;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            User = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 26: {
            Host = input.ReadString();
            break;
          }
          case 34: {
            Port = input.ReadString();
            break;
          }
          case 42: {
            CurrentDatabase = input.ReadString();
            break;
          }
          case 50: {
            CurrentSchema = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AdviseInput : pb::IMessage<AdviseInput> {
    private static readonly pb::MessageParser<AdviseInput> _parser = new pb::MessageParser<AdviseInput>(() => new AdviseInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdviseInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SqlserverProto.SqlserverReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdviseInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdviseInput(AdviseInput other) : this() {
      version_ = other.version_;
      sqls_ = other.sqls_.Clone();
      ruleNames_ = other.ruleNames_.Clone();
      sqlserverMeta_ = other.sqlserverMeta_ != null ? other.sqlserverMeta_.Clone() : null;
      dDLContextSqls_ = other.dDLContextSqls_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdviseInput Clone() {
      return new AdviseInput(this);
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Sqls" field.</summary>
    public const int SqlsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_sqls_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> sqls_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Sqls {
      get { return sqls_; }
    }

    /// <summary>Field number for the "RuleNames" field.</summary>
    public const int RuleNamesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_ruleNames_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> ruleNames_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RuleNames {
      get { return ruleNames_; }
    }

    /// <summary>Field number for the "SqlserverMeta" field.</summary>
    public const int SqlserverMetaFieldNumber = 4;
    private global::SqlserverProto.SqlserverMeta sqlserverMeta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SqlserverProto.SqlserverMeta SqlserverMeta {
      get { return sqlserverMeta_; }
      set {
        sqlserverMeta_ = value;
      }
    }

    /// <summary>Field number for the "DDLContextSqls" field.</summary>
    public const int DDLContextSqlsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::SqlserverProto.DDLContext> _repeated_dDLContextSqls_codec
        = pb::FieldCodec.ForMessage(42, global::SqlserverProto.DDLContext.Parser);
    private readonly pbc::RepeatedField<global::SqlserverProto.DDLContext> dDLContextSqls_ = new pbc::RepeatedField<global::SqlserverProto.DDLContext>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SqlserverProto.DDLContext> DDLContextSqls {
      get { return dDLContextSqls_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdviseInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdviseInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if(!sqls_.Equals(other.sqls_)) return false;
      if(!ruleNames_.Equals(other.ruleNames_)) return false;
      if (!object.Equals(SqlserverMeta, other.SqlserverMeta)) return false;
      if(!dDLContextSqls_.Equals(other.dDLContextSqls_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      hash ^= sqls_.GetHashCode();
      hash ^= ruleNames_.GetHashCode();
      if (sqlserverMeta_ != null) hash ^= SqlserverMeta.GetHashCode();
      hash ^= dDLContextSqls_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      sqls_.WriteTo(output, _repeated_sqls_codec);
      ruleNames_.WriteTo(output, _repeated_ruleNames_codec);
      if (sqlserverMeta_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SqlserverMeta);
      }
      dDLContextSqls_.WriteTo(output, _repeated_dDLContextSqls_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      size += sqls_.CalculateSize(_repeated_sqls_codec);
      size += ruleNames_.CalculateSize(_repeated_ruleNames_codec);
      if (sqlserverMeta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SqlserverMeta);
      }
      size += dDLContextSqls_.CalculateSize(_repeated_dDLContextSqls_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdviseInput other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      sqls_.Add(other.sqls_);
      ruleNames_.Add(other.ruleNames_);
      if (other.sqlserverMeta_ != null) {
        if (sqlserverMeta_ == null) {
          sqlserverMeta_ = new global::SqlserverProto.SqlserverMeta();
        }
        SqlserverMeta.MergeFrom(other.SqlserverMeta);
      }
      dDLContextSqls_.Add(other.dDLContextSqls_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 18: {
            sqls_.AddEntriesFrom(input, _repeated_sqls_codec);
            break;
          }
          case 26: {
            ruleNames_.AddEntriesFrom(input, _repeated_ruleNames_codec);
            break;
          }
          case 34: {
            if (sqlserverMeta_ == null) {
              sqlserverMeta_ = new global::SqlserverProto.SqlserverMeta();
            }
            input.ReadMessage(sqlserverMeta_);
            break;
          }
          case 42: {
            dDLContextSqls_.AddEntriesFrom(input, _repeated_dDLContextSqls_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DDLContext : pb::IMessage<DDLContext> {
    private static readonly pb::MessageParser<DDLContext> _parser = new pb::MessageParser<DDLContext>(() => new DDLContext());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DDLContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SqlserverProto.SqlserverReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DDLContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DDLContext(DDLContext other) : this() {
      sqls_ = other.sqls_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DDLContext Clone() {
      return new DDLContext(this);
    }

    /// <summary>Field number for the "Sqls" field.</summary>
    public const int SqlsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_sqls_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> sqls_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Sqls {
      get { return sqls_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DDLContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DDLContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!sqls_.Equals(other.sqls_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= sqls_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      sqls_.WriteTo(output, _repeated_sqls_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += sqls_.CalculateSize(_repeated_sqls_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DDLContext other) {
      if (other == null) {
        return;
      }
      sqls_.Add(other.sqls_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            sqls_.AddEntriesFrom(input, _repeated_sqls_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AdviseOutput : pb::IMessage<AdviseOutput> {
    private static readonly pb::MessageParser<AdviseOutput> _parser = new pb::MessageParser<AdviseOutput>(() => new AdviseOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdviseOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SqlserverProto.SqlserverReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdviseOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdviseOutput(AdviseOutput other) : this() {
      results_ = other.results_.Clone();
      baseValidatorFailed_ = other.baseValidatorFailed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdviseOutput Clone() {
      return new AdviseOutput(this);
    }

    /// <summary>Field number for the "Results" field.</summary>
    public const int ResultsFieldNumber = 1;
    private static readonly pbc::MapField<string, global::SqlserverProto.AdviseResult>.Codec _map_results_codec
        = new pbc::MapField<string, global::SqlserverProto.AdviseResult>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::SqlserverProto.AdviseResult.Parser), 10);
    private readonly pbc::MapField<string, global::SqlserverProto.AdviseResult> results_ = new pbc::MapField<string, global::SqlserverProto.AdviseResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::SqlserverProto.AdviseResult> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "BaseValidatorFailed" field.</summary>
    public const int BaseValidatorFailedFieldNumber = 2;
    private bool baseValidatorFailed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BaseValidatorFailed {
      get { return baseValidatorFailed_; }
      set {
        baseValidatorFailed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdviseOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdviseOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Results.Equals(other.Results)) return false;
      if (BaseValidatorFailed != other.BaseValidatorFailed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Results.GetHashCode();
      if (BaseValidatorFailed != false) hash ^= BaseValidatorFailed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      results_.WriteTo(output, _map_results_codec);
      if (BaseValidatorFailed != false) {
        output.WriteRawTag(16);
        output.WriteBool(BaseValidatorFailed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += results_.CalculateSize(_map_results_codec);
      if (BaseValidatorFailed != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdviseOutput other) {
      if (other == null) {
        return;
      }
      results_.Add(other.results_);
      if (other.BaseValidatorFailed != false) {
        BaseValidatorFailed = other.BaseValidatorFailed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            results_.AddEntriesFrom(input, _map_results_codec);
            break;
          }
          case 16: {
            BaseValidatorFailed = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AdviseResult : pb::IMessage<AdviseResult> {
    private static readonly pb::MessageParser<AdviseResult> _parser = new pb::MessageParser<AdviseResult>(() => new AdviseResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdviseResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SqlserverProto.SqlserverReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdviseResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdviseResult(AdviseResult other) : this() {
      adviseLevel_ = other.adviseLevel_;
      adviseResultMessage_ = other.adviseResultMessage_;
      isDDL_ = other.isDDL_;
      isDML_ = other.isDML_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdviseResult Clone() {
      return new AdviseResult(this);
    }

    /// <summary>Field number for the "AdviseLevel" field.</summary>
    public const int AdviseLevelFieldNumber = 1;
    private string adviseLevel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AdviseLevel {
      get { return adviseLevel_; }
      set {
        adviseLevel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AdviseResultMessage" field.</summary>
    public const int AdviseResultMessageFieldNumber = 2;
    private string adviseResultMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AdviseResultMessage {
      get { return adviseResultMessage_; }
      set {
        adviseResultMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsDDL" field.</summary>
    public const int IsDDLFieldNumber = 3;
    private bool isDDL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDDL {
      get { return isDDL_; }
      set {
        isDDL_ = value;
      }
    }

    /// <summary>Field number for the "IsDML" field.</summary>
    public const int IsDMLFieldNumber = 4;
    private bool isDML_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDML {
      get { return isDML_; }
      set {
        isDML_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdviseResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdviseResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AdviseLevel != other.AdviseLevel) return false;
      if (AdviseResultMessage != other.AdviseResultMessage) return false;
      if (IsDDL != other.IsDDL) return false;
      if (IsDML != other.IsDML) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AdviseLevel.Length != 0) hash ^= AdviseLevel.GetHashCode();
      if (AdviseResultMessage.Length != 0) hash ^= AdviseResultMessage.GetHashCode();
      if (IsDDL != false) hash ^= IsDDL.GetHashCode();
      if (IsDML != false) hash ^= IsDML.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AdviseLevel.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AdviseLevel);
      }
      if (AdviseResultMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AdviseResultMessage);
      }
      if (IsDDL != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsDDL);
      }
      if (IsDML != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsDML);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AdviseLevel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AdviseLevel);
      }
      if (AdviseResultMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AdviseResultMessage);
      }
      if (IsDDL != false) {
        size += 1 + 1;
      }
      if (IsDML != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdviseResult other) {
      if (other == null) {
        return;
      }
      if (other.AdviseLevel.Length != 0) {
        AdviseLevel = other.AdviseLevel;
      }
      if (other.AdviseResultMessage.Length != 0) {
        AdviseResultMessage = other.AdviseResultMessage;
      }
      if (other.IsDDL != false) {
        IsDDL = other.IsDDL;
      }
      if (other.IsDML != false) {
        IsDML = other.IsDML;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AdviseLevel = input.ReadString();
            break;
          }
          case 18: {
            AdviseResultMessage = input.ReadString();
            break;
          }
          case 24: {
            IsDDL = input.ReadBool();
            break;
          }
          case 32: {
            IsDML = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Config : pb::IMessage<Config> {
    private static readonly pb::MessageParser<Config> _parser = new pb::MessageParser<Config>(() => new Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SqlserverProto.SqlserverReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config(Config other) : this() {
      dMLRollbackMaxRows_ = other.dMLRollbackMaxRows_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config Clone() {
      return new Config(this);
    }

    /// <summary>Field number for the "DMLRollbackMaxRows" field.</summary>
    public const int DMLRollbackMaxRowsFieldNumber = 1;
    private long dMLRollbackMaxRows_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DMLRollbackMaxRows {
      get { return dMLRollbackMaxRows_; }
      set {
        dMLRollbackMaxRows_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DMLRollbackMaxRows != other.DMLRollbackMaxRows) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DMLRollbackMaxRows != 0L) hash ^= DMLRollbackMaxRows.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DMLRollbackMaxRows != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(DMLRollbackMaxRows);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DMLRollbackMaxRows != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DMLRollbackMaxRows);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Config other) {
      if (other == null) {
        return;
      }
      if (other.DMLRollbackMaxRows != 0L) {
        DMLRollbackMaxRows = other.DMLRollbackMaxRows;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DMLRollbackMaxRows = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRollbackSqlsInput : pb::IMessage<GetRollbackSqlsInput> {
    private static readonly pb::MessageParser<GetRollbackSqlsInput> _parser = new pb::MessageParser<GetRollbackSqlsInput>(() => new GetRollbackSqlsInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRollbackSqlsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SqlserverProto.SqlserverReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRollbackSqlsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRollbackSqlsInput(GetRollbackSqlsInput other) : this() {
      version_ = other.version_;
      sqls_ = other.sqls_.Clone();
      sqlserverMeta_ = other.sqlserverMeta_ != null ? other.sqlserverMeta_.Clone() : null;
      rollbackConfig_ = other.rollbackConfig_ != null ? other.rollbackConfig_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRollbackSqlsInput Clone() {
      return new GetRollbackSqlsInput(this);
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Sqls" field.</summary>
    public const int SqlsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_sqls_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> sqls_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Sqls {
      get { return sqls_; }
    }

    /// <summary>Field number for the "SqlserverMeta" field.</summary>
    public const int SqlserverMetaFieldNumber = 3;
    private global::SqlserverProto.SqlserverMeta sqlserverMeta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SqlserverProto.SqlserverMeta SqlserverMeta {
      get { return sqlserverMeta_; }
      set {
        sqlserverMeta_ = value;
      }
    }

    /// <summary>Field number for the "RollbackConfig" field.</summary>
    public const int RollbackConfigFieldNumber = 4;
    private global::SqlserverProto.Config rollbackConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SqlserverProto.Config RollbackConfig {
      get { return rollbackConfig_; }
      set {
        rollbackConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRollbackSqlsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRollbackSqlsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if(!sqls_.Equals(other.sqls_)) return false;
      if (!object.Equals(SqlserverMeta, other.SqlserverMeta)) return false;
      if (!object.Equals(RollbackConfig, other.RollbackConfig)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      hash ^= sqls_.GetHashCode();
      if (sqlserverMeta_ != null) hash ^= SqlserverMeta.GetHashCode();
      if (rollbackConfig_ != null) hash ^= RollbackConfig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      sqls_.WriteTo(output, _repeated_sqls_codec);
      if (sqlserverMeta_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SqlserverMeta);
      }
      if (rollbackConfig_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RollbackConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      size += sqls_.CalculateSize(_repeated_sqls_codec);
      if (sqlserverMeta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SqlserverMeta);
      }
      if (rollbackConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RollbackConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRollbackSqlsInput other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      sqls_.Add(other.sqls_);
      if (other.sqlserverMeta_ != null) {
        if (sqlserverMeta_ == null) {
          sqlserverMeta_ = new global::SqlserverProto.SqlserverMeta();
        }
        SqlserverMeta.MergeFrom(other.SqlserverMeta);
      }
      if (other.rollbackConfig_ != null) {
        if (rollbackConfig_ == null) {
          rollbackConfig_ = new global::SqlserverProto.Config();
        }
        RollbackConfig.MergeFrom(other.RollbackConfig);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 18: {
            sqls_.AddEntriesFrom(input, _repeated_sqls_codec);
            break;
          }
          case 26: {
            if (sqlserverMeta_ == null) {
              sqlserverMeta_ = new global::SqlserverProto.SqlserverMeta();
            }
            input.ReadMessage(sqlserverMeta_);
            break;
          }
          case 34: {
            if (rollbackConfig_ == null) {
              rollbackConfig_ = new global::SqlserverProto.Config();
            }
            input.ReadMessage(rollbackConfig_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRollbackSqlsOutput : pb::IMessage<GetRollbackSqlsOutput> {
    private static readonly pb::MessageParser<GetRollbackSqlsOutput> _parser = new pb::MessageParser<GetRollbackSqlsOutput>(() => new GetRollbackSqlsOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRollbackSqlsOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SqlserverProto.SqlserverReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRollbackSqlsOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRollbackSqlsOutput(GetRollbackSqlsOutput other) : this() {
      rollbackSqls_ = other.rollbackSqls_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRollbackSqlsOutput Clone() {
      return new GetRollbackSqlsOutput(this);
    }

    /// <summary>Field number for the "RollbackSqls" field.</summary>
    public const int RollbackSqlsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SqlserverProto.Sql> _repeated_rollbackSqls_codec
        = pb::FieldCodec.ForMessage(10, global::SqlserverProto.Sql.Parser);
    private readonly pbc::RepeatedField<global::SqlserverProto.Sql> rollbackSqls_ = new pbc::RepeatedField<global::SqlserverProto.Sql>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SqlserverProto.Sql> RollbackSqls {
      get { return rollbackSqls_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRollbackSqlsOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRollbackSqlsOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rollbackSqls_.Equals(other.rollbackSqls_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rollbackSqls_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rollbackSqls_.WriteTo(output, _repeated_rollbackSqls_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rollbackSqls_.CalculateSize(_repeated_rollbackSqls_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRollbackSqlsOutput other) {
      if (other == null) {
        return;
      }
      rollbackSqls_.Add(other.rollbackSqls_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rollbackSqls_.AddEntriesFrom(input, _repeated_rollbackSqls_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
