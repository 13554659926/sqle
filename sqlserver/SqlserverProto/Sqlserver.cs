// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Sqlserver.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SqlserverProto {

  /// <summary>Holder for reflection information generated from Sqlserver.proto</summary>
  public static partial class SqlserverReflection {

    #region Descriptor
    /// <summary>File descriptor for Sqlserver.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SqlserverReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9TcWxzZXJ2ZXIucHJvdG8SDlNxbHNlcnZlclByb3RvIi8KDlNwbGl0U3Fs",
            "c0lucHV0Eg8KB1ZlcnNpb24YASABKAkSDAoEU3FscxgCIAEoCSIfCg9TcGxp",
            "dFNxbHNPdXRwdXQSDAoEU3FscxgBIAMoCSJkCg1TcWxzZXJ2ZXJNZXRhEgwK",
            "BFVzZXIYASABKAkSEAoIUGFzc3dvcmQYAiABKAkSDAoESG9zdBgDIAEoCRIM",
            "CgRQb3J0GAQgASgJEhcKD0N1cnJlbnREYXRhYmFzZRgFIAEoCSJ1CgtBZHZp",
            "c2VJbnB1dBIPCgdWZXJzaW9uGAEgASgJEgwKBFNxbHMYAiADKAkSEQoJUnVs",
            "ZU5hbWVzGAMgAygJEjQKDVNxbHNlcnZlck1ldGEYBCABKAsyHS5TcWxzZXJ2",
            "ZXJQcm90by5TcWxzZXJ2ZXJNZXRhIkMKDEFkdmlzZU91dHB1dBIzCg1BZHZp",
            "c2VSZXN1bHRzGAEgAygLMhwuU3Fsc2VydmVyUHJvdG8uQWR2aXNlUmVzdWx0",
            "IkAKDEFkdmlzZVJlc3VsdBITCgtBZHZpc2VMZXZlbBgBIAEoCRIbChNBZHZp",
            "c2VSZXN1bHRNZXNzYWdlGAIgASgJImsKFEdldFJvbGxiYWNrU3Fsc0lucHV0",
            "Eg8KB1ZlcnNpb24YASABKAkSDAoEU3FscxgCIAMoCRI0Cg1TcWxzZXJ2ZXJN",
            "ZXRhGAMgASgLMh0uU3Fsc2VydmVyUHJvdG8uU3Fsc2VydmVyTWV0YSItChVH",
            "ZXRSb2xsYmFja1NxbHNPdXRwdXQSFAoMUm9sbGJhY2tTcWxzGAEgAygJMo4C",
            "ChBTcWxzZXJ2ZXJTZXJ2aWNlElEKDEdldFNwbGl0U3FscxIeLlNxbHNlcnZl",
            "clByb3RvLlNwbGl0U3Fsc0lucHV0Gh8uU3Fsc2VydmVyUHJvdG8uU3BsaXRT",
            "cWxzT3V0cHV0IgASRQoGQWR2aXNlEhsuU3Fsc2VydmVyUHJvdG8uQWR2aXNl",
            "SW5wdXQaHC5TcWxzZXJ2ZXJQcm90by5BZHZpc2VPdXRwdXQiABJgCg9HZXRS",
            "b2xsYmFja1NxbHMSJC5TcWxzZXJ2ZXJQcm90by5HZXRSb2xsYmFja1NxbHNJ",
            "bnB1dBolLlNxbHNlcnZlclByb3RvLkdldFJvbGxiYWNrU3Fsc091dHB1dCIA",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SqlserverProto.SplitSqlsInput), global::SqlserverProto.SplitSqlsInput.Parser, new[]{ "Version", "Sqls" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SqlserverProto.SplitSqlsOutput), global::SqlserverProto.SplitSqlsOutput.Parser, new[]{ "Sqls" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SqlserverProto.SqlserverMeta), global::SqlserverProto.SqlserverMeta.Parser, new[]{ "User", "Password", "Host", "Port", "CurrentDatabase" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SqlserverProto.AdviseInput), global::SqlserverProto.AdviseInput.Parser, new[]{ "Version", "Sqls", "RuleNames", "SqlserverMeta" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SqlserverProto.AdviseOutput), global::SqlserverProto.AdviseOutput.Parser, new[]{ "AdviseResults" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SqlserverProto.AdviseResult), global::SqlserverProto.AdviseResult.Parser, new[]{ "AdviseLevel", "AdviseResultMessage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SqlserverProto.GetRollbackSqlsInput), global::SqlserverProto.GetRollbackSqlsInput.Parser, new[]{ "Version", "Sqls", "SqlserverMeta" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SqlserverProto.GetRollbackSqlsOutput), global::SqlserverProto.GetRollbackSqlsOutput.Parser, new[]{ "RollbackSqls" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SplitSqlsInput : pb::IMessage<SplitSqlsInput> {
    private static readonly pb::MessageParser<SplitSqlsInput> _parser = new pb::MessageParser<SplitSqlsInput>(() => new SplitSqlsInput());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SplitSqlsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SqlserverProto.SqlserverReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SplitSqlsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SplitSqlsInput(SplitSqlsInput other) : this() {
      version_ = other.version_;
      sqls_ = other.sqls_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SplitSqlsInput Clone() {
      return new SplitSqlsInput(this);
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Sqls" field.</summary>
    public const int SqlsFieldNumber = 2;
    private string sqls_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sqls {
      get { return sqls_; }
      set {
        sqls_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SplitSqlsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SplitSqlsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (Sqls != other.Sqls) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Sqls.Length != 0) hash ^= Sqls.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      if (Sqls.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Sqls);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (Sqls.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sqls);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SplitSqlsInput other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Sqls.Length != 0) {
        Sqls = other.Sqls;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 18: {
            Sqls = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SplitSqlsOutput : pb::IMessage<SplitSqlsOutput> {
    private static readonly pb::MessageParser<SplitSqlsOutput> _parser = new pb::MessageParser<SplitSqlsOutput>(() => new SplitSqlsOutput());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SplitSqlsOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SqlserverProto.SqlserverReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SplitSqlsOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SplitSqlsOutput(SplitSqlsOutput other) : this() {
      sqls_ = other.sqls_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SplitSqlsOutput Clone() {
      return new SplitSqlsOutput(this);
    }

    /// <summary>Field number for the "Sqls" field.</summary>
    public const int SqlsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_sqls_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> sqls_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Sqls {
      get { return sqls_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SplitSqlsOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SplitSqlsOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!sqls_.Equals(other.sqls_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= sqls_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      sqls_.WriteTo(output, _repeated_sqls_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += sqls_.CalculateSize(_repeated_sqls_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SplitSqlsOutput other) {
      if (other == null) {
        return;
      }
      sqls_.Add(other.sqls_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            sqls_.AddEntriesFrom(input, _repeated_sqls_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SqlserverMeta : pb::IMessage<SqlserverMeta> {
    private static readonly pb::MessageParser<SqlserverMeta> _parser = new pb::MessageParser<SqlserverMeta>(() => new SqlserverMeta());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SqlserverMeta> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SqlserverProto.SqlserverReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlserverMeta() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlserverMeta(SqlserverMeta other) : this() {
      user_ = other.user_;
      password_ = other.password_;
      host_ = other.host_;
      port_ = other.port_;
      currentDatabase_ = other.currentDatabase_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlserverMeta Clone() {
      return new SqlserverMeta(this);
    }

    /// <summary>Field number for the "User" field.</summary>
    public const int UserFieldNumber = 1;
    private string user_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string User {
      get { return user_; }
      set {
        user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Host" field.</summary>
    public const int HostFieldNumber = 3;
    private string host_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Port" field.</summary>
    public const int PortFieldNumber = 4;
    private string port_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Port {
      get { return port_; }
      set {
        port_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentDatabase" field.</summary>
    public const int CurrentDatabaseFieldNumber = 5;
    private string currentDatabase_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentDatabase {
      get { return currentDatabase_; }
      set {
        currentDatabase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SqlserverMeta);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SqlserverMeta other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (User != other.User) return false;
      if (Password != other.Password) return false;
      if (Host != other.Host) return false;
      if (Port != other.Port) return false;
      if (CurrentDatabase != other.CurrentDatabase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (User.Length != 0) hash ^= User.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (Port.Length != 0) hash ^= Port.GetHashCode();
      if (CurrentDatabase.Length != 0) hash ^= CurrentDatabase.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (User.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(User);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (Host.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Host);
      }
      if (Port.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Port);
      }
      if (CurrentDatabase.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CurrentDatabase);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (User.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (Port.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Port);
      }
      if (CurrentDatabase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentDatabase);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SqlserverMeta other) {
      if (other == null) {
        return;
      }
      if (other.User.Length != 0) {
        User = other.User;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.Port.Length != 0) {
        Port = other.Port;
      }
      if (other.CurrentDatabase.Length != 0) {
        CurrentDatabase = other.CurrentDatabase;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            User = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 26: {
            Host = input.ReadString();
            break;
          }
          case 34: {
            Port = input.ReadString();
            break;
          }
          case 42: {
            CurrentDatabase = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AdviseInput : pb::IMessage<AdviseInput> {
    private static readonly pb::MessageParser<AdviseInput> _parser = new pb::MessageParser<AdviseInput>(() => new AdviseInput());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdviseInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SqlserverProto.SqlserverReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdviseInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdviseInput(AdviseInput other) : this() {
      version_ = other.version_;
      sqls_ = other.sqls_.Clone();
      ruleNames_ = other.ruleNames_.Clone();
      SqlserverMeta = other.sqlserverMeta_ != null ? other.SqlserverMeta.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdviseInput Clone() {
      return new AdviseInput(this);
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Sqls" field.</summary>
    public const int SqlsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_sqls_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> sqls_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Sqls {
      get { return sqls_; }
    }

    /// <summary>Field number for the "RuleNames" field.</summary>
    public const int RuleNamesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_ruleNames_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> ruleNames_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RuleNames {
      get { return ruleNames_; }
    }

    /// <summary>Field number for the "SqlserverMeta" field.</summary>
    public const int SqlserverMetaFieldNumber = 4;
    private global::SqlserverProto.SqlserverMeta sqlserverMeta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SqlserverProto.SqlserverMeta SqlserverMeta {
      get { return sqlserverMeta_; }
      set {
        sqlserverMeta_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdviseInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdviseInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if(!sqls_.Equals(other.sqls_)) return false;
      if(!ruleNames_.Equals(other.ruleNames_)) return false;
      if (!object.Equals(SqlserverMeta, other.SqlserverMeta)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      hash ^= sqls_.GetHashCode();
      hash ^= ruleNames_.GetHashCode();
      if (sqlserverMeta_ != null) hash ^= SqlserverMeta.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      sqls_.WriteTo(output, _repeated_sqls_codec);
      ruleNames_.WriteTo(output, _repeated_ruleNames_codec);
      if (sqlserverMeta_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SqlserverMeta);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      size += sqls_.CalculateSize(_repeated_sqls_codec);
      size += ruleNames_.CalculateSize(_repeated_ruleNames_codec);
      if (sqlserverMeta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SqlserverMeta);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdviseInput other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      sqls_.Add(other.sqls_);
      ruleNames_.Add(other.ruleNames_);
      if (other.sqlserverMeta_ != null) {
        if (sqlserverMeta_ == null) {
          sqlserverMeta_ = new global::SqlserverProto.SqlserverMeta();
        }
        SqlserverMeta.MergeFrom(other.SqlserverMeta);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 18: {
            sqls_.AddEntriesFrom(input, _repeated_sqls_codec);
            break;
          }
          case 26: {
            ruleNames_.AddEntriesFrom(input, _repeated_ruleNames_codec);
            break;
          }
          case 34: {
            if (sqlserverMeta_ == null) {
              sqlserverMeta_ = new global::SqlserverProto.SqlserverMeta();
            }
            input.ReadMessage(sqlserverMeta_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AdviseOutput : pb::IMessage<AdviseOutput> {
    private static readonly pb::MessageParser<AdviseOutput> _parser = new pb::MessageParser<AdviseOutput>(() => new AdviseOutput());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdviseOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SqlserverProto.SqlserverReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdviseOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdviseOutput(AdviseOutput other) : this() {
      adviseResults_ = other.adviseResults_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdviseOutput Clone() {
      return new AdviseOutput(this);
    }

    /// <summary>Field number for the "AdviseResults" field.</summary>
    public const int AdviseResultsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SqlserverProto.AdviseResult> _repeated_adviseResults_codec
        = pb::FieldCodec.ForMessage(10, global::SqlserverProto.AdviseResult.Parser);
    private readonly pbc::RepeatedField<global::SqlserverProto.AdviseResult> adviseResults_ = new pbc::RepeatedField<global::SqlserverProto.AdviseResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SqlserverProto.AdviseResult> AdviseResults {
      get { return adviseResults_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdviseOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdviseOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!adviseResults_.Equals(other.adviseResults_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= adviseResults_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      adviseResults_.WriteTo(output, _repeated_adviseResults_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += adviseResults_.CalculateSize(_repeated_adviseResults_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdviseOutput other) {
      if (other == null) {
        return;
      }
      adviseResults_.Add(other.adviseResults_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            adviseResults_.AddEntriesFrom(input, _repeated_adviseResults_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AdviseResult : pb::IMessage<AdviseResult> {
    private static readonly pb::MessageParser<AdviseResult> _parser = new pb::MessageParser<AdviseResult>(() => new AdviseResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdviseResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SqlserverProto.SqlserverReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdviseResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdviseResult(AdviseResult other) : this() {
      adviseLevel_ = other.adviseLevel_;
      adviseResultMessage_ = other.adviseResultMessage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdviseResult Clone() {
      return new AdviseResult(this);
    }

    /// <summary>Field number for the "AdviseLevel" field.</summary>
    public const int AdviseLevelFieldNumber = 1;
    private string adviseLevel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AdviseLevel {
      get { return adviseLevel_; }
      set {
        adviseLevel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AdviseResultMessage" field.</summary>
    public const int AdviseResultMessageFieldNumber = 2;
    private string adviseResultMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AdviseResultMessage {
      get { return adviseResultMessage_; }
      set {
        adviseResultMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdviseResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdviseResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AdviseLevel != other.AdviseLevel) return false;
      if (AdviseResultMessage != other.AdviseResultMessage) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AdviseLevel.Length != 0) hash ^= AdviseLevel.GetHashCode();
      if (AdviseResultMessage.Length != 0) hash ^= AdviseResultMessage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AdviseLevel.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AdviseLevel);
      }
      if (AdviseResultMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AdviseResultMessage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AdviseLevel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AdviseLevel);
      }
      if (AdviseResultMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AdviseResultMessage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdviseResult other) {
      if (other == null) {
        return;
      }
      if (other.AdviseLevel.Length != 0) {
        AdviseLevel = other.AdviseLevel;
      }
      if (other.AdviseResultMessage.Length != 0) {
        AdviseResultMessage = other.AdviseResultMessage;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AdviseLevel = input.ReadString();
            break;
          }
          case 18: {
            AdviseResultMessage = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRollbackSqlsInput : pb::IMessage<GetRollbackSqlsInput> {
    private static readonly pb::MessageParser<GetRollbackSqlsInput> _parser = new pb::MessageParser<GetRollbackSqlsInput>(() => new GetRollbackSqlsInput());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRollbackSqlsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SqlserverProto.SqlserverReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRollbackSqlsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRollbackSqlsInput(GetRollbackSqlsInput other) : this() {
      version_ = other.version_;
      sqls_ = other.sqls_.Clone();
      SqlserverMeta = other.sqlserverMeta_ != null ? other.SqlserverMeta.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRollbackSqlsInput Clone() {
      return new GetRollbackSqlsInput(this);
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Sqls" field.</summary>
    public const int SqlsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_sqls_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> sqls_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Sqls {
      get { return sqls_; }
    }

    /// <summary>Field number for the "SqlserverMeta" field.</summary>
    public const int SqlserverMetaFieldNumber = 3;
    private global::SqlserverProto.SqlserverMeta sqlserverMeta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SqlserverProto.SqlserverMeta SqlserverMeta {
      get { return sqlserverMeta_; }
      set {
        sqlserverMeta_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRollbackSqlsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRollbackSqlsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if(!sqls_.Equals(other.sqls_)) return false;
      if (!object.Equals(SqlserverMeta, other.SqlserverMeta)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      hash ^= sqls_.GetHashCode();
      if (sqlserverMeta_ != null) hash ^= SqlserverMeta.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      sqls_.WriteTo(output, _repeated_sqls_codec);
      if (sqlserverMeta_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SqlserverMeta);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      size += sqls_.CalculateSize(_repeated_sqls_codec);
      if (sqlserverMeta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SqlserverMeta);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRollbackSqlsInput other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      sqls_.Add(other.sqls_);
      if (other.sqlserverMeta_ != null) {
        if (sqlserverMeta_ == null) {
          sqlserverMeta_ = new global::SqlserverProto.SqlserverMeta();
        }
        SqlserverMeta.MergeFrom(other.SqlserverMeta);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 18: {
            sqls_.AddEntriesFrom(input, _repeated_sqls_codec);
            break;
          }
          case 26: {
            if (sqlserverMeta_ == null) {
              sqlserverMeta_ = new global::SqlserverProto.SqlserverMeta();
            }
            input.ReadMessage(sqlserverMeta_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRollbackSqlsOutput : pb::IMessage<GetRollbackSqlsOutput> {
    private static readonly pb::MessageParser<GetRollbackSqlsOutput> _parser = new pb::MessageParser<GetRollbackSqlsOutput>(() => new GetRollbackSqlsOutput());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRollbackSqlsOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SqlserverProto.SqlserverReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRollbackSqlsOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRollbackSqlsOutput(GetRollbackSqlsOutput other) : this() {
      rollbackSqls_ = other.rollbackSqls_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRollbackSqlsOutput Clone() {
      return new GetRollbackSqlsOutput(this);
    }

    /// <summary>Field number for the "RollbackSqls" field.</summary>
    public const int RollbackSqlsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_rollbackSqls_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> rollbackSqls_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RollbackSqls {
      get { return rollbackSqls_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRollbackSqlsOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRollbackSqlsOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rollbackSqls_.Equals(other.rollbackSqls_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rollbackSqls_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rollbackSqls_.WriteTo(output, _repeated_rollbackSqls_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rollbackSqls_.CalculateSize(_repeated_rollbackSqls_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRollbackSqlsOutput other) {
      if (other == null) {
        return;
      }
      rollbackSqls_.Add(other.rollbackSqls_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rollbackSqls_.AddEntriesFrom(input, _repeated_rollbackSqls_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
